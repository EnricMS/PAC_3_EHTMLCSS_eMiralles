"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.entry = void 0;
const chalk_1 = __importDefault(require("chalk"));
const puppeteer_1 = __importDefault(require("puppeteer"));
const analyze_site_1 = require("./utils/analyze-site");
const helper_functions_1 = require("./utils/helper-functions");
const login_1 = require("./utils/login");
const result_functions_1 = require("./utils/result-functions");
const setup_config_1 = require("./utils/setup-config");
async function entry(config, axeSpecs, onlyReturn) {
    try {
        (0, setup_config_1.prepareWorkspace)(config);
        (0, helper_functions_1.log)(chalk_1.default.blue('#############################################################################################'));
        (0, helper_functions_1.log)(chalk_1.default.blue(`Start accessibility Test for ${config.name}`));
        (0, helper_functions_1.log)(chalk_1.default.blue('#############################################################################################'));
        const promises = [];
        config.viewports.forEach((viewport) => promises.push(checkSite(config, axeSpecs, viewport, onlyReturn)));
        return Promise.all(promises);
    }
    catch (err) {
        (0, helper_functions_1.error)(err.message);
        (0, helper_functions_1.debug)(config.debugMode, err.stackTrace);
        throw err;
    }
}
exports.entry = entry;
async function checkSite(config, axeSpecs, vp, onlyReturn) {
    const browser = await puppeteer_1.default.launch(config.launchOptions);
    const page = (await browser.pages())[0];
    await page.setViewport({
        width: vp.width,
        height: vp.height,
    });
    await (0, login_1.executeLogin)(page, config);
    const usedLocale = config.axeConfig?.locale
        ? config.axeConfig?.locale
        : config.axeConfig?.localePath
            ? config.axeConfig?.localePath
            : 'en';
    const result = {
        testEngine: undefined,
        testEnvironment: undefined,
        testRunner: undefined,
        timestamp: new Date().toISOString(),
        toolOptions: undefined,
        name: '',
        violations: [],
        inapplicable: [],
        incomplete: [],
        passes: [],
        analyzedUrls: [],
        tabables: [],
        usedLocale: usedLocale,
    };
    const alreadyVisited = new Map();
    const report = await (0, analyze_site_1.analyzeSite)(axeSpecs, page, config, [], browser, alreadyVisited, [], []);
    await browser.close();
    result.name = config.name;
    (0, result_functions_1.mergeResults)(report, result);
    if (result.violations.length > config.threshold) {
        throw new Error('Threshold (' + config.threshold + ') not met. There are ' + result.violations.length + ' errors.');
    }
    if (config.json) {
        (0, helper_functions_1.writeToJsonFile)(JSON.stringify(result, null, 2), config.resultsPathPerUrl, vp);
    }
    else if (!onlyReturn) {
        (0, helper_functions_1.log)(JSON.stringify(report, null, 4));
    }
    return result;
}
