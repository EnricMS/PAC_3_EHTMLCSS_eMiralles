"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.clickingElements = void 0;
const helper_functions_1 = require("./helper-functions");
const analyze_site_1 = require("./analyze-site");
const setup_config_1 = require("./setup-config");
const create_url_result_1 = require("./create-url-result");
const alreadyClicked = new Map();
async function clickingElements(config, url, page, elementsToClick, axeSpecs, resultsByUrl, browser, alreadyVisited, alreadyParsed, notCheckedLinks) {
    (0, helper_functions_1.log)(config.debugMode, 'All links of ' + url + ' visited. Now Clicking elements');
    await page.goto(url, { waitUntil: 'networkidle2' });
    await (0, helper_functions_1.waitForHTML)(page);
    const elToClick = elementsToClick.get(url);
    if (elToClick && elToClick.length > 0) {
        for (const [i, element] of elToClick.entries()) {
            (0, helper_functions_1.debug)(config.debugMode, 'Clicking ' + i + ' of ' + elToClick.length);
            if (element && !alreadyClicked.get(url)?.includes(element)) {
                (0, helper_functions_1.debug)(config.debugMode, 'Element to be clicked: ' + element);
                try {
                    const alrdyClicked = alreadyClicked.get(url);
                    if (alrdyClicked) {
                        alrdyClicked.push(element);
                    }
                    else {
                        alreadyClicked.set(url, [url]);
                    }
                    await page.evaluate((element) => {
                        document.querySelector(element).click();
                    }, element);
                    await (0, helper_functions_1.waitForHTML)(page);
                }
                catch (e) {
                    (0, helper_functions_1.debug)(config.debugMode, 'Seems like element not found. ' + e);
                }
                try {
                    await page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 5000 });
                    await (0, helper_functions_1.waitForHTML)(page);
                    await (0, analyze_site_1.analyzeSite)(axeSpecs, page, config, resultsByUrl, browser, alreadyVisited, alreadyParsed, notCheckedLinks, page.url());
                }
                catch (e) {
                    (0, helper_functions_1.log)('seems like click was no navigation. Analyze and do it. ' + e);
                    await (0, helper_functions_1.waitForHTML)(page);
                    if (page.url() !== url && !alreadyVisited.get(url)) {
                        await (0, analyze_site_1.analyzeSite)(axeSpecs, page, config, resultsByUrl, browser, alreadyVisited, alreadyParsed, notCheckedLinks, page.url());
                        await page.goto(url, { waitUntil: 'load' });
                        await (0, helper_functions_1.waitForHTML)(page);
                    }
                    else if (config.analyzeClicksWithoutNavigation) {
                        (0, helper_functions_1.debug)(config.debugMode, 'Experimental feature! Please check if there are too many clicks!');
                        const axe = await (0, setup_config_1.setupAxe)(page, axeSpecs, config);
                        const axeResults = await axe.analyze();
                        resultsByUrl.push(await (0, create_url_result_1.createUrlResult)(url + '_' + element + '_clicked', axeResults));
                    }
                }
            }
        }
    }
}
exports.clickingElements = clickingElements;
