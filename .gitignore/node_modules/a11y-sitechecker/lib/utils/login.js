"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.executeLogin = void 0;
const helper_functions_1 = require("./helper-functions");
const chalk_1 = __importDefault(require("chalk"));
const helper_saving_screenshots_1 = require("./helper-saving-screenshots");
async function executeLogin(page, config) {
    if (!config.login || !config.login.url) {
        (0, helper_functions_1.debug)(config.debugMode, 'No Login specified');
        return 0;
    }
    let failedLoads = 0;
    let failed = true;
    while (failedLoads < 3 && failed) {
        failed = false;
        try {
            try {
                (0, helper_functions_1.debug)(config.debugMode, 'Navigating to url: ' + config.login.url);
                await page.goto(config.login.url, { waitUntil: 'networkidle2' });
                await page.waitForNavigation({ waitUntil: 'networkidle2', timeout: config.timeout });
            }
            catch (e) {
                (0, helper_functions_1.error)(e);
            }
            await (0, helper_functions_1.waitForHTML)(page, config.timeout, config.debugMode);
            await (0, helper_saving_screenshots_1.saveScreenshot)(page, config.imagesPath, 'loginSite.png', config.saveImages);
        }
        catch (e) {
            failedLoads++;
            failed = true;
            (0, helper_functions_1.error)('Error in opening LoginPage' + e);
        }
    }
    for (const step of config.login.steps) {
        for (const input of step.input) {
            await page.waitForSelector(input.selector, { timeout: config.timeout });
            (0, helper_functions_1.debug)(config.debugMode, 'Waited for selector ' + input.selector);
            await page.type(input.selector, input.value);
        }
        (0, helper_functions_1.debug)(config.debugMode, 'Clicking submit: ' + step.submit);
        await page.click(step.submit);
    }
    try {
        await page.waitForNavigation({ waitUntil: 'networkidle2' });
        (0, helper_functions_1.debug)(config.debugMode, 'Navigation finished: ' + page.url());
        await (0, helper_functions_1.waitForHTML)(page);
        await (0, helper_saving_screenshots_1.saveScreenshot)(page, config.imagesPath, 'afterLogin.png', config.saveImages);
    }
    catch (e) {
        (0, helper_functions_1.log)(chalk_1.default.red('No Navigation after Login. Please check if it\'s working as expected!'));
    }
    (0, helper_functions_1.debug)(config.debugMode, 'Finished Login Script: ' + config.login.url);
    return 1;
}
exports.executeLogin = executeLogin;
