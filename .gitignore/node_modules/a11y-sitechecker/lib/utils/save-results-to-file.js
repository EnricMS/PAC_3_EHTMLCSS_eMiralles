"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.saveResultsToFile = void 0;
const fs_1 = __importDefault(require("fs"));
const uuid_1 = require("uuid");
const define_extratags_1 = require("../utils/define-extratags");
const setup_siteresult_1 = require("../utils/setup-siteresult");
const helper_functions_1 = require("./helper-functions");
async function saveResultsToFile(config, sitecheckerResult, i) {
    (0, helper_functions_1.log)('#############################################################################################');
    (0, helper_functions_1.log)('Updating resultsFolder with file with Current Time Result');
    (0, helper_functions_1.log)('#############################################################################################');
    const currentDate = new Date();
    const dateToSave = String(currentDate.getDate().toLocaleString().padStart(2, '0') +
        '_' +
        (currentDate.getMonth() + 1).toLocaleString().padStart(2, '0') +
        '_' +
        currentDate.getFullYear() +
        '_' +
        currentDate.getHours().toLocaleString().padStart(2, '0') +
        '_' +
        currentDate.getMinutes().toLocaleString().padStart(2, '0') +
        '_' +
        currentDate.getSeconds().toLocaleString().padStart(2, '0') +
        '_' +
        sitecheckerResult.testEnvironment?.windowWidth +
        '_' +
        sitecheckerResult.testEnvironment?.windowHeight);
    const fileToSave = config.resultsPathPerUrl + dateToSave + '.json';
    let fileObject;
    let id;
    try {
        const data = fs_1.default.readFileSync(config.resultsPath + 'files.json');
        fileObject = JSON.parse(data.toString());
        if (fileObject.filter((f) => f.url.includes(config.name)).length > 0) {
            id = fileObject.filter((f) => f.url.includes(config.name))[0]._id;
            if (i === 0) {
                const filesByDate = fileObject.filter((f) => f.url.includes(config.name))[0].filesByDate;
                filesByDate.push({
                    date: new Date(),
                    files: [fileToSave],
                });
            }
            else {
                const filesByDate = fileObject.filter((f) => f.url.includes(config.name))[0].filesByDate;
                filesByDate[filesByDate.length - 1].files.push(fileToSave);
            }
        }
        else {
            id = (0, uuid_1.v4)();
            fileObject.push({
                _id: id,
                url: config.name,
                filesByDate: [
                    {
                        date: new Date(),
                        files: [fileToSave],
                    },
                ],
            });
        }
    }
    catch (e) {
        id = (0, uuid_1.v4)();
        const fileResult = {
            date: new Date(),
            files: [fileToSave],
        };
        fileObject = new Array({ _id: id, url: config.name, filesByDate: [fileResult] });
    }
    const siteResult = (0, setup_siteresult_1.setupSiteresult)(id, sitecheckerResult);
    (0, define_extratags_1.defineExtraTags)(sitecheckerResult, config);
    fs_1.default.writeFileSync(fileToSave, JSON.stringify(siteResult, null, 4));
    fs_1.default.writeFileSync(config.resultsPath + 'files.json', JSON.stringify(fileObject, null, 4));
    const basePath = config.resultsPathPerUrl +
        (0, helper_functions_1.getEscaped)(id) +
        '_' +
        sitecheckerResult.testEnvironment?.windowWidth +
        '_' +
        sitecheckerResult.testEnvironment?.windowHeight;
    const violationsPath = basePath + '_violations.json';
    const incompletesPath = basePath + '_incompletes.json';
    const passesPath = basePath + '_passes.json';
    const inapplicablesPath = basePath + '_inapplicables.json';
    fs_1.default.writeFileSync(violationsPath, JSON.stringify(sitecheckerResult.violations, null, 4));
    fs_1.default.writeFileSync(incompletesPath, JSON.stringify(sitecheckerResult.incomplete, null, 4));
    fs_1.default.writeFileSync(passesPath, JSON.stringify(sitecheckerResult.passes, null, 4));
    fs_1.default.writeFileSync(inapplicablesPath, JSON.stringify(sitecheckerResult.inapplicable, null, 4));
}
exports.saveResultsToFile = saveResultsToFile;
