"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.acceptCookieConsent = void 0;
const helper_functions_1 = require("./helper-functions");
const helper_saving_screenshots_1 = require("./helper-saving-screenshots");
let count = 0;
async function acceptCookieConsent(page, config) {
    await (0, helper_functions_1.waitForHTML)(page, config.timeout, config.debugMode);
    const frames = page.frames();
    frames.filter((f) => f.url() !== 'about:blank');
    let cookieId;
    try {
        for (const frame of frames) {
            (0, helper_functions_1.debug)(config.debugMode, 'Check frame ' + (frame.name() || frame.url()) + ' for consent button');
            if (config.cookieSelector && config.cookieText) {
                cookieId = await frame.evaluate((cookieSelector, cookieText, count) => {
                    const elements = document.querySelectorAll(cookieSelector);
                    const cookieElements = Array.from(elements).filter((d) => RegExp(cookieText, 'i').test(d.textContent.trim()));
                    if (cookieElements && cookieElements.length > 0) {
                        const element = cookieElements[0];
                        if (!element.id) {
                            element.setAttribute('id', 'consent_screen_' + count);
                        }
                        return cookieElements[0].id;
                    }
                    else {
                        return undefined;
                    }
                }, config.cookieSelector, config.cookieText, count);
            }
            if (cookieId) {
                await (0, helper_saving_screenshots_1.saveScreenshot)(page, config.imagesPath, 'consent_screen_' + count + '.png', config.saveImages, config.debugMode);
                await frame.evaluate((cookieId) => {
                    const element = document.getElementById(cookieId);
                    element?.click();
                }, cookieId);
                count++;
                break;
            }
            else {
                (0, helper_functions_1.debug)(config.debugMode, 'No cookie element found. Iframe Name or Url: ' + (frame.name() || frame.url()));
            }
        }
    }
    catch (e) {
        (0, helper_functions_1.debug)(config.debugMode, e);
        (0, helper_functions_1.log)('Error in capturing consent Frames. Ignore it! ');
    }
}
exports.acceptCookieConsent = acceptCookieConsent;
