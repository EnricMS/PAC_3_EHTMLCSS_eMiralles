"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.markAllEvents = void 0;
const helper_functions_1 = require("./helper-functions");
const unique_selector_1 = require("./unique-selector");
const expose_deep_js_1 = require("./expose-deep-js");
async function markAllEvents(page, config) {
    (0, helper_functions_1.debug)(config.debugMode, 'mark all events for ' + page.url());
    await page.evaluate((0, expose_deep_js_1.exposeDepsJs)({ getUniqueSelector: unique_selector_1.getUniqueSelector }));
    await page.evaluate((0, expose_deep_js_1.exposeDepsJs)({ uniqueQuery: unique_selector_1.uniqueQuery }));
    await page.evaluate((0, expose_deep_js_1.exposeDepsJs)({ getSelector: unique_selector_1.getSelector }));
    const allElements = JSON.parse(await page.evaluate(() => {
        const allElements = Array.from(document.querySelectorAll('*'));
        return JSON.stringify(allElements.map((f) => window.getUniqueSelector(f).replace(/"/gi, "'")));
    }));
    const result = {};
    const client = await page.target().createCDPSession();
    for (const element of allElements) {
        const expression = 'document.querySelector("' + element + '")';
        const nodeObject = (await client.send('Runtime.evaluate', {
            expression: expression,
        })).result;
        if (nodeObject.objectId) {
            const eventListenersCdp = await client.send('DOMDebugger.getEventListeners', {
                objectId: nodeObject.objectId,
            });
            const eventListeners = eventListenersCdp.listeners;
            if (eventListeners.length > 0) {
                eventListeners.forEach((eventListener) => {
                    if (result[eventListener.type]) {
                        result[eventListener.type].push(element);
                    }
                    else {
                        result[eventListener.type] = [element];
                    }
                });
            }
        }
    }
    return result;
}
exports.markAllEvents = markAllEvents;
