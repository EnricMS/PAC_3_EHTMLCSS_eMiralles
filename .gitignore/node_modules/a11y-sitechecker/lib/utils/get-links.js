"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLinks = void 0;
const jsdom_1 = __importDefault(require("jsdom"));
const chalk_1 = __importDefault(require("chalk"));
const unique_selector_1 = require("./unique-selector");
const helper_functions_1 = require("./helper-functions");
const urlEndingsToIgnore = ['jpeg', 'jpg', 'pdf', 'xml', 'png'];
function getLinks(html, url, config, alreadyParsed, rootDomain, elementsToClick, notCheckedLinks, alreadyVisited) {
    if (alreadyParsed.includes(url)) {
        return [];
    }
    alreadyParsed.push(url);
    const dom = new jsdom_1.default.JSDOM(html, { contentType: 'text/html' });
    const links = [];
    if (!rootDomain.value) {
        const rootDomainURL = new URL(url);
        rootDomain.value = (rootDomainURL.hostname + rootDomainURL.pathname).replace('www.', '');
        (0, helper_functions_1.debug)(config.debugMode, chalk_1.default.green('RootDomain was set to: ' + rootDomain.value));
    }
    dom.window.document.querySelectorAll('a').forEach((element) => {
        let link = element.href;
        if (link === '' && element.getAttributeNames().includes('ng-click')) {
            const sElementBeIgnored = (0, helper_functions_1.shouldElementBeIgnored)(element, config.ignoreElementAttributeValues);
            if (!sElementBeIgnored) {
                const uniqueSelector = (0, unique_selector_1.getUniqueSelector)(element, dom);
                const elmsToClick = elementsToClick.get(url);
                if (elementsToClick.has(url) && elmsToClick) {
                    elmsToClick.push(uniqueSelector);
                }
                else {
                    elementsToClick.set(url, [uniqueSelector]);
                }
            }
            else {
                (0, helper_functions_1.debug)(config.debugMode, chalk_1.default.yellow('Element ignored, because of given array: ' + element));
            }
        }
        if ((0, helper_functions_1.endsWithAny)(urlEndingsToIgnore, link)) {
            (0, helper_functions_1.debug)(config.debugMode, 'Link ignored because it is part of the endings to exclude: ' + link);
        }
        else {
            if ((0, helper_functions_1.isAbsoluteUrl)(link) && link.includes(rootDomain.value)) {
                if (link.startsWith('//')) {
                    link = url.startsWith('https') ? 'https:' + link : 'http:' + link;
                }
                if (link.endsWith('/')) {
                    link = link.substring(0, link.length - 1);
                }
                if (!links.includes(link) && !alreadyVisited.get(link)) {
                    links.push(link);
                }
            }
            else if (!(0, helper_functions_1.isAbsoluteUrl)(link) && !link.includes('#')) {
                let absoluteUrl = new URL(link, url).href;
                if (absoluteUrl.endsWith('/')) {
                    absoluteUrl = absoluteUrl.substring(0, absoluteUrl.length - 1);
                }
                if (!links.includes(absoluteUrl) &&
                    !alreadyVisited.get(absoluteUrl) &&
                    absoluteUrl.includes(rootDomain.value)) {
                    links.push(absoluteUrl);
                }
            }
            else if (!notCheckedLinks.includes(link)) {
                notCheckedLinks.push(link);
            }
        }
    });
    if (config.analyzeClicks) {
        (0, helper_functions_1.debug)(config.debugMode, chalk_1.default.yellow('Searching all clickable Items'));
        dom.window.document
            .querySelectorAll(config.clickableItemSelector
            ? config.clickableItemSelector
            : 'button, select, details, [tabindex]:not([tabindex="-1"])')
            .forEach((element) => {
            if (!element.hasAttribute('disabled') &&
                !(0, helper_functions_1.shouldElementBeIgnored)(element, config.ignoreElementAttributeValues)) {
                const uniqueSelector = (0, unique_selector_1.getUniqueSelector)(element, dom);
                const elmsToClick = elementsToClick.get(url);
                if (elementsToClick.has(url) && elmsToClick) {
                    if (!elmsToClick.includes(uniqueSelector)) {
                        elmsToClick.push(uniqueSelector);
                    }
                }
                else {
                    elementsToClick.set(url, [uniqueSelector]);
                }
            }
            else {
                (0, helper_functions_1.debug)(config.debugMode, chalk_1.default.yellow('Element ignored, because of given array or disabled: ' + element));
            }
        });
    }
    return links;
}
exports.getLinks = getLinks;
