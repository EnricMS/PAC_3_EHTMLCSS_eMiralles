"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.analyzeUrl = void 0;
const helper_functions_1 = require("./helper-functions");
const mark_all_tabable_items_1 = require("./mark-all-tabable-items");
const setup_config_1 = require("./setup-config");
const make_sreenshots_with_errors_borderd_1 = require("./make-sreenshots-with-errors-borderd");
const create_url_result_1 = require("./create-url-result");
const accept_consent_screens_1 = require("./accept-consent-screens");
const helper_saving_screenshots_1 = require("./helper-saving-screenshots");
const mark_all_events_1 = require("./mark-all-events");
async function analyzeUrl(page, url, axeSpecs, config, alreadyVisited, savedScreenshotHtmls) {
    if (page.url() !== url) {
        await page.goto(url, { waitUntil: 'load' });
        if (config.cookieText && config.cookieSelector) {
            await (0, accept_consent_screens_1.acceptCookieConsent)(page, config);
        }
        await (0, helper_functions_1.waitForHTML)(page, config.timeout, config.debugMode);
    }
    else {
        (0, helper_functions_1.debug)(config.debugMode, 'URL already open.' + url);
    }
    const analyzedSiteViewport = alreadyVisited.get(url);
    if (analyzedSiteViewport &&
        analyzedSiteViewport.width === page.viewport()?.width &&
        analyzedSiteViewport.height === page.viewport()?.height) {
        (0, helper_functions_1.debug)(config.debugMode, 'Already visited: ' + url);
        return null;
    }
    const viewport = page.viewport();
    if (viewport) {
        alreadyVisited.set(url, viewport);
    }
    (0, helper_functions_1.log)('Currently analyzing ' + url);
    if (config.saveImages) {
        await (0, helper_saving_screenshots_1.saveScreenshot)(page, config.imagesPath, (0, helper_functions_1.getEscaped)(url) + '.png', config.saveImages);
    }
    let axeResults;
    try {
        const axe = await (0, setup_config_1.setupAxe)(page, axeSpecs, config);
        axeResults = await axe.analyze();
    }
    catch (e) {
        (0, helper_functions_1.error)(e + '. Error Axe');
    }
    let urlResult;
    if (axeResults) {
        urlResult = await (0, create_url_result_1.createUrlResult)(url, axeResults);
        await (0, make_sreenshots_with_errors_borderd_1.makeScreenshotsWithErrorsBorderd)(urlResult, page, config, savedScreenshotHtmls);
        const events = await (0, mark_all_events_1.markAllEvents)(page, config);
        await (0, mark_all_tabable_items_1.markAllTabableItems)(page, url, config, urlResult, events);
        return urlResult;
    }
    return null;
}
exports.analyzeUrl = analyzeUrl;
