"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSelector = exports.uniqueQuery = exports.getUniqueSelector = void 0;
function getUniqueSelector(elSrc, dom) {
    let sSel;
    const aAttr = ['name', 'value', 'title', 'placeholder', 'data-*'], aSel = [];
    while (elSrc.parentNode) {
        if (getSelector(aSel, elSrc, sSel, aAttr, dom))
            return aSel.join(' > ');
        elSrc = elSrc.parentNode;
    }
    return '';
}
exports.getUniqueSelector = getUniqueSelector;
function uniqueQuery(aSel, dom) {
    try {
        return dom
            ? dom.window.document.querySelectorAll(aSel.join('>')).length === 1
            : document.querySelectorAll(aSel.join('>')).length === 1;
    }
    catch (e) {
        const queryStringValidCss = [];
        aSel.forEach((a) => {
            queryStringValidCss.push(a.substring(0, a.indexOf('.')) + "[class='" + a.substring(a.indexOf('.') + 1, a.length) + "']");
        });
        return dom
            ? dom.window.document.querySelectorAll(queryStringValidCss.join('>')).length === 1
            : document.querySelectorAll(queryStringValidCss.join('>')).length === 1;
    }
}
exports.uniqueQuery = uniqueQuery;
function getSelector(aSel, el, sSel, aAttr, dom) {
    if (el?.id) {
        if (el.id.match(/^\d/)) {
            aSel.unshift("[id='" + el.id + "']");
        }
        else {
            aSel.unshift('#' + el.id);
        }
        return true;
    }
    aSel.unshift((sSel = el.nodeName.toLowerCase()));
    if (el?.getAttribute('class')) {
        aSel[0] = sSel += '.' + el.getAttribute('class')?.trim().replace(/ +/g, '.');
        if (uniqueQuery(aSel, dom))
            return true;
    }
    for (let i = 0; i < aAttr.length; ++i) {
        if (aAttr[i] === 'data-*') {
            const aDataAttr = [].filter.call(el.attributes, function (attr) {
                return attr.name.indexOf('data-') === 0;
            });
            for (let j = 0; j < aDataAttr.length; ++j) {
                aSel[0] = sSel += '[' + aDataAttr[j].name + '="' + aDataAttr[j].value + '"]';
                if (uniqueQuery(aSel, dom))
                    return true;
            }
        }
        else if (el && el.getAttribute(aAttr[i])) {
            aSel[0] = sSel += '[' + aAttr[i] + '="' + el.getAttribute(aAttr[i]) + '"]';
            if (uniqueQuery(aSel, dom))
                return true;
        }
    }
    let elChild = el;
    let n = 1;
    while ((elChild = elChild?.previousElementSibling)) {
        if (elChild.nodeName === el?.nodeName)
            ++n;
    }
    aSel[0] = sSel += ':nth-of-type(' + n + ')';
    if (uniqueQuery(aSel, dom))
        return true;
    elChild = el;
    n = 1;
    while ((elChild = elChild?.previousElementSibling))
        ++n;
    aSel[0] = sSel = sSel.replace(/:nth-of-type\(\d+\)/, n > 1 ? ':nth-child(' + n + ')' : ':first-child');
    return uniqueQuery(aSel, dom);
}
exports.getSelector = getSelector;
