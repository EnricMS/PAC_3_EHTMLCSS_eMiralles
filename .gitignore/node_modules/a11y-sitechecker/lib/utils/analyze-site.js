"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.analyzeSite = void 0;
const rxjs_1 = require("rxjs");
const operators_1 = require("rxjs/operators");
const analyze_url_1 = require("./analyze-url");
const clicking_elements_1 = require("./clicking-elements");
const get_links_1 = require("./get-links");
const helper_functions_1 = require("./helper-functions");
const elementsToClick = new Map();
const rootDomain = { value: '' };
const savedScreenshotHtmls = new Map();
async function analyzeSite(axeSpecs, firstpage, config, resultsByUrl, browser, alreadyVisited, alreadyParsed, notCheckedLinks, link) {
    if (config.crawl === false) {
        const resultsAsPromise = (0, rxjs_1.lastValueFrom)((0, rxjs_1.from)(config.urlsToAnalyze).pipe((0, operators_1.mergeMap)(async (url) => {
            const page = await browser.newPage();
            const viewport = firstpage.viewport();
            if (viewport) {
                await page.setViewport(viewport);
            }
            const result = await (0, analyze_url_1.analyzeUrl)(page, url, axeSpecs, config, alreadyVisited, savedScreenshotHtmls);
            await page.close();
            return result;
        }, 4), (0, operators_1.toArray)()));
        const result = await resultsAsPromise;
        resultsByUrl.push(...result);
    }
    else {
        let url;
        if (!link) {
            url = config.urlsToAnalyze[0];
        }
        else {
            url = link;
        }
        if (!url.startsWith('https://') && !url.startsWith('http://')) {
            url = 'https://' + url;
        }
        if (url.endsWith('/')) {
            url = url.substring(0, url.length - 1);
        }
        (0, helper_functions_1.log)('Start analyze of ' + url);
        resultsByUrl.push(await (0, analyze_url_1.analyzeUrl)(firstpage, url, axeSpecs, config, alreadyVisited, savedScreenshotHtmls));
        const html = await firstpage.content();
        const links = (0, get_links_1.getLinks)(html, url, config, alreadyParsed, rootDomain, elementsToClick, notCheckedLinks, alreadyVisited);
        const results = (0, rxjs_1.lastValueFrom)((0, rxjs_1.from)(links.entries()).pipe((0, operators_1.mergeMap)(async ([i, link]) => {
            (0, helper_functions_1.debug)(config.debugMode, 'Visiting ' + i + ' of ' + (links.length - 1));
            const page = await browser.newPage();
            const viewport = firstpage.viewport();
            if (viewport) {
                await page.setViewport(viewport);
            }
            if (alreadyVisited.get(link)) {
                return null;
            }
            const result = await (0, analyze_url_1.analyzeUrl)(page, link, axeSpecs, config, alreadyVisited, savedScreenshotHtmls);
            await page.close();
            return result;
        }, 4), (0, operators_1.toArray)()));
        resultsByUrl.push(...(await results));
        if (config.analyzeClicks)
            await (0, clicking_elements_1.clickingElements)(config, url, firstpage, elementsToClick, axeSpecs, resultsByUrl, browser, alreadyVisited, alreadyParsed, notCheckedLinks);
        for (const [i, link] of links.entries()) {
            (0, helper_functions_1.log)(config.debugMode, 'parsing ' + i + ' of ' + (links.length - 1));
            if (!alreadyParsed.includes(link)) {
                await analyzeSite(axeSpecs, firstpage, config, resultsByUrl, browser, alreadyVisited, alreadyParsed, notCheckedLinks, link);
                (0, helper_functions_1.log)(config.debugMode, 'Finished analyze of Site: ' + link);
            }
        }
    }
    savedScreenshotHtmls.clear();
    return resultsByUrl.filter(notEmpty);
}
exports.analyzeSite = analyzeSite;
function notEmpty(value) {
    return value !== null && value !== undefined;
}
