#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultFunction = void 0;
const commander_1 = require("commander");
const a11y_sitechecker_1 = require("../lib/a11y-sitechecker");
const helper_functions_1 = require("../lib/utils/helper-functions");
const save_results_to_file_1 = require("../lib/utils/save-results-to-file");
const setup_config_1 = require("../lib/utils/setup-config");
const package_json_1 = __importDefault(require("../package.json"));
const defaultFunction = async () => {
    commander_1.program
        .version(package_json_1.default.version)
        .usage('[options] <paths>')
        .option('-j, --json', 'Output results as JSON. Otherwise output is displayed on the console', false)
        .option('--config <string>', 'Provide a config.json')
        .option('-T, --threshold <number>', 'permit this number of errors, warnings, or notices, otherwise fail with exit code 2', '0')
        .parse(process.argv);
    const config = (0, setup_config_1.setupConfig)(commander_1.program.opts());
    const axeConfig = (0, setup_config_1.setupAxeConfig)(config);
    let retCode = 0;
    try {
        const results = await (0, a11y_sitechecker_1.entry)(config, axeConfig, !commander_1.program.opts().json);
        for (const [i, sitecheckerResult] of results.entries()) {
            await (0, save_results_to_file_1.saveResultsToFile)(config, sitecheckerResult, i);
            if (sitecheckerResult.violations.length >= config.threshold) {
                retCode = 2;
            }
        }
    }
    catch (e) {
        if (e.message.includes('Threshold not met')) {
            retCode = 2;
        }
        else if (e.message.includes('ERR_NAME_NOT_RESOLVED')) {
            retCode = 3;
        }
        else {
            retCode = 1;
        }
        (0, helper_functions_1.error)(e);
    }
    process.exit(retCode);
};
exports.defaultFunction = defaultFunction;
